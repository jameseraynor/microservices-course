# ===================================================================
# DISCOVERY SERVICE CONFIGURATION
# Spring Boot Configuration for Eureka Discovery Server
# ===================================================================

# ----------------------------------------
# SERVICE IDENTIFICATION
# ----------------------------------------
# Name of the service as it will appear in the Eureka discovery registry
# This identifier is used by other services to locate and communicate with this service
spring.application.name=photo-discovery-service

# ----------------------------------------
# SERVER CONFIGURATION
# ----------------------------------------
# Server port configuration for the discovery service
# Port 8010 is commonly used for Eureka servers
server.port=8010

# ----------------------------------------
# EUREKA SERVER CONFIGURATION
# ----------------------------------------
# Hostname configuration for the Eureka instance
# In production, this should be set to the actual hostname or IP
eureka.instance.hostname=localhost

# Disable registration with other Eureka servers
# Since this is a standalone discovery server, it shouldn't register with itself
eureka.client.register-with-eureka=false

# URL where Eureka clients can find the registry
# Uses properties substitution for hostname and port
# Format: http://${hostname}:${port}/eureka
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka

# ----------------------------------------
# EUREKA SERVER BEHAVIOR
# ----------------------------------------
# Disable self-preservation mode
# WARNING: Only suitable for development; enable in production
# Self-preservation helps protect registry data during network issues
eureka.server.enableSelfPreservation=false

# Disable registry fetch
# Since this is a server, it doesn't need to fetch registry data
eureka.client.fetch-registry=false

# ----------------------------------------
# NETWORK CONFIGURATION
# ----------------------------------------
# Prefer IP address over hostname
# Useful in containerized environments and cloud deployments
eureka.instance.preferIpAddress=true

# ----------------------------------------
# RABBITMQ CONFIGURATION
# ----------------------------------------
# RabbitMQ connection settings for message broker integration
# Host configuration (default: localhost)
spring.rabbitmq.host=localhost

# RabbitMQ port (default: 5672)
spring.rabbitmq.port=5672

# RabbitMQ authentication credentials
# WARNING: Change these in production!
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# ----------------------------------------
# SECURITY CONSIDERATIONS
# ----------------------------------------
# Note: In production environments, consider:
# 1. Enabling security for the Eureka dashboard
# 2. Using HTTPS for service communication
# 3. Implementing authentication for service registration
# 4. Enabling self-preservation mode
# 5. Configuring appropriate timeouts
# 6. Setting up multiple Eureka instances for high availability

# ----------------------------------------
# MONITORING AND HEALTH CHECKS
# ----------------------------------------
# Consider adding:
# 1. Actuator endpoints for monitoring
# 2. Custom health indicators
# 3. Metrics collection
# 4. Logging configuration
# 5. Tracing integration

# ----------------------------------------
# PRODUCTION RECOMMENDATIONS
# ----------------------------------------
# Before deploying to production:
# 1. Enable security
# 2. Configure SSL/TLS
# 3. Enable self-preservation
# 4. Set appropriate timeouts
# 5. Configure high availability
# 6. Set up monitoring
# 7. Configure proper logging
# 8. Set up backup/failover
# 9. Review network settings
# 10. Implement proper authentication

# ----------------------------------------
# DEVELOPMENT VS PRODUCTION
# ----------------------------------------
# Development Settings (current):
# - Self-preservation disabled
# - Simple configuration
# - Local hosting
# - Default credentials
# - Basic setup

# Production Requirements:
# - Security enabled
# - SSL/TLS configured
# - HA setup
# - Monitoring enabled
# - Proper credentials
# - Backup configured
# - Network security
# - Service authentication
