# ===================================================================
# PHOTO APPLICATION USER SERVICE CONFIGURATION
# ===================================================================

# ----------------------------------------
# CORE APPLICATION SETTINGS
# ----------------------------------------
# Service name used for registration with discovery server
spring.application.name=user-ws

# Server port configuration (0 = random port assignment)
server.port=${PORT:0}

# Development tools configuration
spring.devtools.restart.enabled=true

# Error handling configuration
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=always

# ----------------------------------------
# SERVICE DISCOVERY (EUREKA) CONFIGURATION
# ----------------------------------------
# Eureka server location for service registration
eureka.client.service-url.defaultZone=http://localhost:8010/eureka

# Instance configuration
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Service discovery settings
# Register this service with Eureka
eureka.client.register-with-eureka=true    
# Fetch service registry from Eureka
eureka.client.fetch-registry=true          

# ----------------------------------------
# API GATEWAY CONFIGURATION
# ----------------------------------------
# Enable service discovery through gateway
spring.cloud.gateway.discovery.locator.enabled=true

# Gateway IP address for security validation
gateway.ip=192.168.0.129
# gateway.ip=10.0.0.113    # Alternative IP configuration (commented out)

# ----------------------------------------
# DATABASE CONFIGURATION
# ----------------------------------------
# MySQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/photo_app?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=admin123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# Show SQL queries in logs
spring.jpa.show-sql=true                   
# Automatically update schema
spring.jpa.hibernate.ddl-auto=update       

# H2 Database Configuration (commented out - alternative for development)
#spring.h2.console.enabled=true
#spring.h2.console.settings.web-allow-others=true
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# ----------------------------------------
# SECURITY CONFIGURATION
# ----------------------------------------
# JWT Token Settings
token.expriration_time=3600
token.secret=xyq8tn54mjg9mtsl20w17fmmbo6uol0wye2sjcnr7dhyyqo38z84te33eje6svl9

# Authentication endpoint
login.url.path=/user/login

# ----------------------------------------
# CONFIG SERVER SETTINGS
# ----------------------------------------
# Config server location and settings
spring.config.import=optional:configserver:http://localhost:8888
spring.config.name=photo_app_config_server

# ----------------------------------------
# MESSAGE BROKER (RABBITMQ) CONFIGURATION
# ----------------------------------------
# RabbitMQ Connection Settings
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# ----------------------------------------
# MONITORING AND ACTUATOR ENDPOINTS
# ----------------------------------------
# Expose management endpoints
management.endpoints.web.exposure.include=*

# Health endpoint configuration
management.endpoint.health.show-details=always
management.endpoint.health.access=unrestricted
management.health.circuitbreakers.enabled=true

# ----------------------------------------
# LOGGING CONFIGURATION
# ----------------------------------------
# Set logging levels for specific components
logging.level.com.apicourse.photapp.api.users.photo_api_users.data.AlbumServiceClient=DEBUG


resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
resilience4j.circuitbreaker.instances.albums-ws.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.albums-ws.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.albums-ws.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-size=2
resilience4j.circuitbreaker.instances.albums-ws.minimum-number-of-calls=1
resilience4j.circuitbreaker.instances.albums-ws.event-consumer-buffer-size=10

resilience4j.retry.retry-aspect-order=2
resilience4j.retry.instances.albums-ws.max-attempts=3
resilience4j.retry.instances.albums-ws.wait-duration=2s
resilience4j.retry.instances.albums-ws.enable-exponential-backoff=true
resilience4j.retry.instances.albums-ws.exponential-backoff-multiplier=5