# =============================================================================
# APPLICATION IDENTIFICATION
# =============================================================================
# Defines the service name for registration in Eureka discovery registry
# Other services use this identifier for service-to-service communication
spring.application.name=api-gateway

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Port configuration for the API Gateway service
server.port=8082
# Hostname configuration for local development
eureka.instance.hostname=localhost

# =============================================================================
# EUREKA CLIENT CONFIGURATION
# =============================================================================
# Eureka server location for service registration and discovery
# Multiple URLs can be specified for high availability
eureka.client.service-url.defaultZone=http://localhost:8010/eureka

# Service discovery settings
spring.cloud.discovery.enabled=true
# Prefer IP address instead of hostname for service registration
eureka.instance.preferIpAddress=true

# =============================================================================
# GATEWAY CONFIGURATION
# =============================================================================
# Enable service discovery locator
spring.cloud.gateway.discovery.locator.enabled=true
# Convert service IDs to lowercase for consistent routing
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# =============================================================================
# ROUTE DEFINITIONS
# =============================================================================
# Route configuration for user service status check endpoint
# [0] represents the first route configuration
spring.cloud.gateway.routes[0].id=users-status-check
# Route destination using load balanced (lb) scheme
spring.cloud.gateway.routes[0].uri=lb://user-ws
# Path-based routing predicate
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check
# HTTP method-based routing predicate
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# Remove Cookie header from the request
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].id = users-ws-h2-console
spring.cloud.gateway.routes[1].uri = lb://user-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/user-ws/h2-console
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/user-ws/(?<segment>.*), /$\{segment} 
# =============================================================================
# URL REWRITE FILTER CONFIGURATION
# =============================================================================
# Rewrites incoming URLs from the user-ws service pattern to a simplified format
# Input example: /user-ws/api/users -> /api/users
# The filter uses regex pattern matching to capture and transform the URL path
# (?<segment>.*) - Captures all characters after /user-ws/ into a named group 'segment'
# /${segment} - Replaces the matched pattern with just the captured segment
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}

