# =================================
# API GATEWAY CONFIGURATION
# =================================

# Core Application Settings
# ---------------------------------
spring.application.name=api-gateway
server.port=8082

# Eureka Service Discovery Settings
# ---------------------------------
eureka.instance.hostname=localhost
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
eureka.instance.preferIpAddress=true
# spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Gateway Routes Configuration
# ---------------------------------

# Health Check Route
# Handles status check requests
spring.cloud.gateway.routes[0].id=users-status-check
spring.cloud.gateway.routes[0].uri=lb://user-ws
spring.cloud.gateway.routes[0].predicates[0]=Path=/user-ws/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization,Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

# H2 Console Route
# Enables database management interface access
spring.cloud.gateway.routes[1].id=users-ws-h2-console
spring.cloud.gateway.routes[1].uri=lb://user-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/user-ws/h2-console
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}

# Authentication Route
# Handles user login requests
spring.cloud.gateway.routes[2].id=users-ws-login
spring.cloud.gateway.routes[2].uri=lb://user-ws
spring.cloud.gateway.routes[2].predicates[0]=Path=/user-ws/user/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}

# User Creation Route
# Handles new user registration
spring.cloud.gateway.routes[3].id=users-ws-post
spring.cloud.gateway.routes[3].uri=lb://user-ws
spring.cloud.gateway.routes[3].predicates[0]=Path=/user-ws/users
spring.cloud.gateway.routes[3].predicates[1]=Method=POST
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}

# User Management Route
# Handles GET, PUT, DELETE operations for users
spring.cloud.gateway.routes[4].id=users-ws-other-http-methods
spring.cloud.gateway.routes[4].uri=lb://user-ws
spring.cloud.gateway.routes[4].predicates[0]=Path=/user-ws/users/**
spring.cloud.gateway.routes[4].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[4].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}
spring.cloud.gateway.routes[4].filters[2]=AuthorizationHeaderFilter

spring.cloud.gateway.routes[5].id=users-ws-actuator
spring.cloud.gateway.routes[5].uri=lb://user-ws
spring.cloud.gateway.routes[5].predicates[0]=Path=/user-ws/actuator/**
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.routes[5].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[5].filters[1]=RewritePath=/user-ws/(?<segment>.*), /${segment}

# Secret key for JWT token signing (should be stored securely in production)
token.secret=xyq8tn54mjg9mtsl20w17fmmbo6uol0wye2sjcnr7dhyyqo38z84te33eje6svl9Local

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# spring.config.import=configserver:http://localhost:8888
spring.config.import=configserver:http://localhost:8888
spring.config.name=photo_app_config_server

management.endpoint.gateway.access=UNRESTRICTED
management.endpoints.web.exposure.include=gateway,health,mappings,info,metrics,prometheus,refresh,env,loggers,auditevents,httptrace,threaddump